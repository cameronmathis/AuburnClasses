#indicates whether the random number generator is initialized based on time in microseconds or a specific seed
#accepts "time" or "seed" as parameters
randomBased = time
#the seed number if above value set to "seed"
#accepts int value
seedNumber = 0

#search algorithm and all block-box search algorithm parameters
#accepts "uniformRandomSearch" or "validityForcedUniformRandomSearch" as parameters
initializationAlgorithm = validityForcedUniformRandomSearch

#the number of runs in a single experiment
#accepts int value
numberRuns = 30

#individuals in the adult pool
#accepts int value
mu = 200

#offspring in each generation
#must be less than or equal to mu
#accepts int value
lambda = 200

#the algorithm used for parent selection
#accepts "FPS" (Fitness Proportional Selection) and "tournament" (with replacement)
parentsSelection = tournament
#tournament size for parent selection
#accept int value
kParent = 8

#the algorithm used for survival selection
#accepts "truncation" and "tournament" (without replacement)
survivalSelection = truncation
#tournament size for survival selection
#accept int value
kSurvival = 8

#criterion used to determine convergence
#accepts "numberOfEvals" and "convergence"
terminationCriterion = numberOfEvals
#the maximum number of fitness evaluations each run is allotted
#accepts int values
numberFitnessEvaluations = 10000
#n for termination convergence criterion
#accepts int values
n = 1000

#the relative file path+name of the solution file
solutionFilePath = solutions/solutionA2.lup

#the relative file path+name of the log file
logFilePath = logs/logA2.txt

#whether or not to check solutions against black cell constraints for validity
#accepts boolean values
doCheckBlackCells = false
